import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:google_generative_ai/google_generative_ai.dart';

class ChatController extends GetxController {
  final TextEditingController textController = TextEditingController();
  RxList<Map<String, String>> messages = <Map<String, String>>[].obs;
  RxBool isTyping = false.obs;

  final GenerativeModel model = GenerativeModel(
    model: "gemini-2.0-flash",
    apiKey: "AIzaSyARVNQK2J9ohWgp5K7kioSRmrfeJJsKugI", // üî• Replace with secure API storage
  );

  @override
  void onInit() {
    super.onInit();
    _sendWelcomeMessage(); // ‚úÖ Send Welcome Message on Start
  }

  // ‚úÖ Send Welcome Message when Chat Starts
  void _sendWelcomeMessage() {
    messages.insert(0, {
      "sender": "bot",
      "text":
      "üåø Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi **AgroMind**! T√¥i l√† **C·ªë v·∫•n S·ª©c kh·ªèe C√¢y tr·ªìng** c·ªßa b·∫°n. üå±\n\nB·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n‚úÖ C√°ch chƒÉm s√≥c c√¢y (T∆∞·ªõi n∆∞·ªõc, √Ånh s√°ng, Ph√¢n b√≥n)\n‚úÖ Ch·∫©n ƒëo√°n b·ªánh cho c√¢y\n‚úÖ L·ªùi khuy√™n v·ªÅ tr·ªìng v√† duy tr√¨ c√¢y c·∫£nh"
    });
  }

  // ‚úÖ Send User Message and Fetch AI Response
  void sendMessage() async {
    String userMessage = textController.text.trim();
    if (userMessage.isEmpty) return;

    messages.insert(0, {"sender": "user", "text": userMessage});
    textController.clear();
    isTyping.value = true;

    try {
      // ‚úÖ Ensure AI only answers plant-related queries
      if (!_isPlantRelated(userMessage)) {
        messages.insert(0, {
          "sender": "bot",
          "text": "üö´ T√¥i ch·ªâ c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn **chƒÉm s√≥c c√¢y, s·ª©c kh·ªèe c√¢y tr·ªìng v√† l√†m v∆∞·ªùn**. üå± H√£y th·ª≠ h·ªèi v·ªÅ t∆∞·ªõi n∆∞·ªõc, √°nh s√°ng m·∫∑t tr·ªùi ho·∫∑c b·ªánh c·ªßa c√¢y nh√©."
        });
      } else {
        // Th√™m y√™u c·∫ßu tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√†o prompt
        String prompt = "$userMessage\n\n(H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch chi ti·∫øt v√† th√¢n thi·ªán.)";
        
        final response = await model.generateContent([Content.text(prompt)]);
        String botResponse = response.text ?? "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu √Ω b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng?";
        messages.insert(0, {"sender": "bot", "text": botResponse});
      }
    } catch (e) {
      print("Gemini API Error: $e");
      messages.insert(0, {"sender": "bot", "text": "‚ö†Ô∏è ƒê√£ c√≥ l·ªói x·∫£y ra: Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau."});
    }

    isTyping.value = false;
  }

  // ‚úÖ Validate if Query is Plant-Related
  bool _isPlantRelated(String query) {
    String lowerQuery = query.toLowerCase();
    List<String> plantKeywords = [
      // Ti·∫øng Anh
      "plant", "watering", "fertilizer", "soil", "disease", "sunlight", "leaves", "growth",
      "flowers", "gardening", "seeds", "roots", "photosynthesis", "botany", "pest", "insect",
      "pruning", "repotting", "hydroponics", "organic", "compost", "mulch", "harvest", "crop",
      "tree", "shrub", "herb", "vegetable", "fruit",
      // Ti·∫øng Vi·ªát (th√™m c√°c t·ª´ kh√≥a ph·ªï bi·∫øn)
      "c√¢y", "t∆∞·ªõi", "n∆∞·ªõc", "ph√¢n b√≥n", "ƒë·∫•t tr·ªìng", "b·ªánh", "s√¢u", "n·∫•m", "√°nh s√°ng", "m·∫∑t tr·ªùi", "l√°",
      "tƒÉng tr∆∞·ªüng", "ra hoa", "l√†m v∆∞·ªùn", "h·∫°t gi·ªëng", "r·ªÖ", "quang h·ª£p", "th·ª±c v·∫≠t h·ªçc", "s√¢u b·ªánh",
      "c√¥n tr√πng", "c·∫Øt t·ªâa", "thay ch·∫≠u", "th·ªßy canh", "h·ªØu c∆°", "ph√¢n compost", "l·ªõp ph·ªß", "thu ho·∫°ch",
      "c√¢y tr·ªìng", "c√¢y c·∫£nh", "rau", "c·ªß", "qu·∫£", "hoa"
    ];

    for (String keyword in plantKeywords) {
      if (lowerQuery.contains(keyword)) {
        return true;
      }
    }
    return false;
  }
}
